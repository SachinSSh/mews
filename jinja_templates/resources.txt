import falcon
import sqlalchemy
import sys
import json
import falcon
import logging
from {{ data.project_name }}.utils.exceptions import JSONDecoderException
from {{ data.project_name }}.utils.exceptions import DataIntegrityException


_logger = logging.getLogger(__name__)

class BaseResource(object):
    def __init__(self, engine):
        self.db = engine

{% for resource in data.resources %}
class {{ resource.resource_name}}Resource(object):
    def __init__(self, engine, data_object):
        self.db = engine
        self.data_object = data_object

{% if resource.on_get %}
    def on_get(self, req, resp):
        results = self.db.session.query(self.data_object)
        response = {"results": []}
        for result in results:
            result = result.to_dict()
            response.get("results").append(result)
        resp.body = json.dumps(response, default=str)
{% endif %}

{% if resource.on_get_by_identifer %}
    def on_get{{ resource.identifier }}(self, req, resp, object{{ resource.identifier }}):
        obj = self.db.session.query(self.data_object).get(object{{ resource.identifier }})
        response = {"results": obj.to_dict()}
        resp.body = json.dumps(response, default=str)
{% endif %}


{% if resource.on_put %}
    def on_put_{{ resource.identifier }}(self, req, resp, object{{ resource.identifier }}):
        try:
            raw = req.stream.read(sys.maxsize)
            raw = json.loads(raw)
        except json.JSONDecodeError:
            raise JSONDecoderException() from None 
        obj = self.db.session.query(self.data_object).get(object{{ resource.identifier }})
        if isinstance(raw, dict):
            for attribute in raw:
                if attribute in self.contents:
                    setattr(obj, attribute, _content_decoder(raw[attribute]))
        else:
            print("Not of type dictionary or JSON.")     
        with self.db.session.begin():
            obj.update(self.db.session, self.data_object)
        resp.status = falcon.HTTP_200      
{% endif %}


{% if resource.on_post %}
    def on_post(self, req, resp):
        try:
            raw = req.stream.read(sys.maxsize)
            raw = json.loads(raw)
        except json.JSONDecodeError:
            raise JSONDecoderException() from None   
        body = []
        if isinstance(raw, dict):
            try:
                with self.db.session.begin():
                    obj = self.data_object(**raw)
                    obj.save(self.db.session)
                self.db.session.refresh(obj)
                body.append(obj.to_dict())
            except sqlalchemy.exc.IntegrityError:
                raise DataIntegrityException() from None
        elif isinstance(raw, list):
            try:
                temp_body = []
                with self.db.session.no_autoflush:
                    for item in raw:
                        obj = self.data_object(**item)
                        obj.save(self.db.session)
                        temp_body.append(obj)
                    self.db.session.flush()
                    for item in temp_body:
                        self.db.session.refresh(item)
                        body.append(item.to_dict())
            except sqlalchemy.exc.IntegrityError:
                raise DataIntegrityException() from None
        response = {"results": body}
        resp.body = json.dumps(response, default=str)
        resp.status = falcon.HTTP_200
{% endif %}


{% if resource.on_del %}
    def on_delete{{ resource.identifier }}(self, req, resp, object{{ resource.identifier }}):
        obj = self.db.session.query(self.data_object).get(data_objects.object_name.obj_identifier)
        with self.db.session.begin():
            obj.remove(self.db.session, self.data_object)
        resp.status = falcon.HTTP_200
{% endif %}


{% endfor %}